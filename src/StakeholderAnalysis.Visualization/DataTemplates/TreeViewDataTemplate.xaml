<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:propertiesTree="clr-namespace:StakeholderAnalysis.Visualization.ViewModels.PropertiesTree"
                    xmlns:visualization="clr-namespace:StakeholderAnalysis.Visualization"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:behaviors="clr-namespace:StakeholderAnalysis.Visualization.Behaviors"
                    xmlns:converters="clr-namespace:StakeholderAnalysis.Visualization.Converters"
                    xmlns:projectExplorer="clr-namespace:StakeholderAnalysis.Visualization.ViewModels.ProjectExplorer"
                    xmlns:data="clr-namespace:StakeholderAnalysis.Data;assembly=StakeholderAnalysis.Data"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:onionDiagrams="clr-namespace:StakeholderAnalysis.Data.OnionDiagrams;assembly=StakeholderAnalysis.Data"
                    xmlns:treeView="clr-namespace:StakeholderAnalysis.Visualization.Converters.TreeView">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="TreeViewStyles.xaml" />
        <ResourceDictionary Source="/StakeholderAnalysis.Visualization;Component/Theme/DeltaresColorTheme.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Image x:Key="MenuItemIcon" Width="18" Height="18" Source="{Binding IconReference}" x:Shared="False" />

    <Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Deltares.Brushes.MouseOverHighlight}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="Icon" Value="{StaticResource MenuItemIcon}" />
        <Setter Property="Header" Value="{Binding Header}" />
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
    </Style>

    <ObjectDataProvider x:Key="StakeholderTypeIconStyles" 
                        MethodName="GetValues"
                        ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="data:StakeholderIconType" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="LineStyles" MethodName="GetValues"
                        ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="onionDiagrams:LineStyle" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <converters:IconTypeToIconSourceConverter x:Key="IconTypeToIconSourceConverter" />
    <converters:LineStyleToDashArrayConverter x:Key="LineStyleToStrokeArrayConverter" />

    <DataTemplate x:Key="ColorPropertyDataTemplate" DataType="propertiesTree:IColorPropertyTreeNodeViewModel">
        <xctk:ColorPicker
            Height="20"
            SelectedColor="{Binding ColorValue}" />
    </DataTemplate>

    <DataTemplate x:Key="LineStyleDataTemplate" DataType="{x:Type propertiesTree:ILineStylePropertyTreeNodeViewModel}">
        <ComboBox
            ItemsSource="{Binding Source={StaticResource LineStyles}}"
            SelectedItem="{Binding LineStyleValue}">
            <ComboBox.ItemTemplate>
                <DataTemplate DataType="{x:Type onionDiagrams:LineStyle}">
                    <StackPanel Orientation="Horizontal" Height="20" VerticalAlignment="Center">
                        <Canvas>
                            <Line
                                StrokeThickness="3"
                                Stroke="Black"
                                X1="5" X2="50" Y1="10" Y2="10"
                                StrokeDashArray="{Binding Converter={StaticResource LineStyleToStrokeArrayConverter}}" />
                        </Canvas>
                    </StackPanel>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
    </DataTemplate>

    <DataTemplate x:Key="DoubleUpDownPropertyDataTemplate"
                  DataType="propertiesTree:IDoubleUpDownPropertyTreeNodeViewModel">
        <xctk:DoubleUpDown
            Value="{Binding DoubleValue}"
            Minimum="{Binding MinValue}"
            Maximum="{Binding MaxValue}"
            Increment="{Binding Increment}"
            FormatString="{Binding StringFormat}" />
    </DataTemplate>

    <DataTemplate x:Key="CheckBoxTemplate" DataType="propertiesTree:IBooleanPropertyTreeNodeViewModel">
        <CheckBox
            Height="20"
            HorizontalAlignment="Center"
            VerticalContentAlignment="Center"
            IsChecked="{Binding BooleanValue}" />
    </DataTemplate>

    <DataTemplate x:Key="StringTemplate" DataType="propertiesTree:IStringPropertyTreeNodeViewModel">
        <TextBox
            Text="{Binding StringValue, UpdateSourceTrigger=PropertyChanged}" />
    </DataTemplate>

    <DataTemplate x:Key="StakeholderTypeIconDataTemplate"
                  DataType="projectExplorer:IStakeholderTypeIconPropertyTreeNodeViewModel">
        <ComboBox
            ItemsSource="{Binding Source={StaticResource StakeholderTypeIconStyles}}"
            SelectedItem="{Binding IconTypeValue}">
            <ComboBox.ItemTemplate>
                <DataTemplate DataType="data:StakeholderIconType">
                    <Image
                        Width="16"
                        Height="16"
                        Source="{Binding Converter={StaticResource IconTypeToIconSourceConverter}}" />
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
    </DataTemplate>

    <DataTemplate x:Key="FontFamilySelectorTemplate" DataType="propertiesTree:IFontFamilyPropertyTreeNodeViewModel">
        <ComboBox
            ItemsSource="{Binding Source={x:Static Fonts.SystemFontFamilies}}"
            SelectedItem="{Binding SelectedValue}" />
    </DataTemplate>

    <DataTemplate x:Key="SliderPropertyDataTemplate"
                  DataType="{x:Type propertiesTree:ISliderPropertyTreeNodeViewModel}">
        <Slider
            Value="{Binding Value}"
            BorderBrush="{StaticResource Deltares.Brushes.DarkGreen}"
            MinWidth="80"
            Minimum="{Binding MinValue}"
            Maximum="{Binding MaxValue}" />
    </DataTemplate>

    <visualization:PropertyValueTreeNodeTemplateSelector x:Key="PropertyValueContentTemplateSelector"
                                                         StakeholderTypeIconDataTemplate="{StaticResource StakeholderTypeIconDataTemplate}"
                                                         FontFamilySelectorTemplate="{StaticResource FontFamilySelectorTemplate}"
                                                         CheckBoxTemplate="{StaticResource CheckBoxTemplate}"
                                                         StringTemplate="{StaticResource StringTemplate}"
                                                         ColorTemplate="{StaticResource ColorPropertyDataTemplate}"
                                                         LineStyleTemplate="{StaticResource LineStyleDataTemplate}"
                                                         DoubleUpDownTemplate="{StaticResource DoubleUpDownPropertyDataTemplate}"
                                                         SliderTemplate="{StaticResource SliderPropertyDataTemplate}" />

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <treeView:QuickSelectionToVisibilityConverter x:Key="QuickSelectionToVisibilityConverter" />
    <treeView:SourceStringToVisibilityConverter x:Key="SourceStringToVisibilityConverter" />
    <treeView:HasItemsToVisibilityConverter x:Key="HasItemsToVisibilityConverter" />

    <DataTemplate x:Key="ITreeNodeItemDataTemplate" DataType="propertiesTree:ITreeNodeViewModel">
        <Border BorderThickness="0">
            <Border.Style>
                <Style TargetType="Border" BasedOn="{StaticResource TreeNodeBorderStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanOpen}" Value="True">
                            <Setter Property="behaviors:AttachInputBindingsBehavior.InputBindings">
                                <Setter.Value>
                                    <InputBindingCollection>
                                        <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenViewCommand}" />
                                        <MouseBinding MouseAction="LeftClick" Command="{Binding SelectItem}" />
                                    </InputBindingCollection>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding Path="IsSelected" />
                            </DataTrigger.Binding>
                            <Setter Property="Background" Value="{StaticResource Deltares.Brushes.DarkGreen}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Border.ContextMenu>
                <ContextMenu
                    Visibility="{Binding ContextMenuItems, Converter={StaticResource HasItemsToVisibilityConverter}}"
                    ItemsSource="{Binding ContextMenuItems}"
                    ItemContainerStyle="{StaticResource MenuItemStyle}" />
            </Border.ContextMenu>
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Button
                    Grid.Column="0"
                    Width="24"
                    Command="{Binding ToggleIsExpandedCommand}"
                    Visibility="{Binding IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Style="{StaticResource ExpandCollapseButtonStyle}" />
                <Image
                    Grid.Column="1"
                    Width="20"
                    Height="20"
                    Margin="2,0,2,0"
                    Visibility="{Binding IconSourceString, Converter={StaticResource SourceStringToVisibilityConverter}}"
                    Source="{Binding IconSourceString}" />
                <CheckBox Grid.Column="2"
                          VerticalContentAlignment="Center"
                          Margin="0,0,2,0"
                          Visibility="{Binding Converter={StaticResource QuickSelectionToVisibilityConverter}}"
                          IsChecked="{Binding IsVisible}" />
                <TextBlock
                    TextAlignment="Left"
                    Grid.Column="3"
                    Text="{Binding DisplayName}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    FontSize="12" />
                <Button
                    Grid.Column="4"
                    Margin="2"
                    Visibility="{Binding CanRemove, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Command="{Binding RemoveItemCommand}"
                    Style="{StaticResource RemoveButtonStyle}" />
                <Button
                    Grid.Column="5"
                    Margin="2"
                    Visibility="{Binding CanAdd, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Command="{Binding AddItemCommand}"
                    Style="{StaticResource AddButtonStyle}" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="PropertyValueItemDataTemplate" DataType="propertiesTree:ITreeNodeViewModel">
        <Border Style="{StaticResource TreeNodeBorderStyle}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="True" />
                </Grid.ColumnDefinitions>
                <TextBlock
                    Margin="10"
                    Grid.Column="0"
                    Text="{Binding DisplayName}"
                    TextAlignment="Left"
                    VerticalAlignment="Center"
                    Background="Transparent" />
                <GridSplitter Grid.Column="1" Width="5" Background="Gainsboro" HorizontalAlignment="Stretch"
                              ResizeBehavior="BasedOnAlignment" />
                <ContentPresenter
                    Grid.Column="2"
                    Margin="5,0"
                    VerticalAlignment="Center"
                    Content="{Binding }"
                    ContentTemplateSelector="{StaticResource PropertyValueContentTemplateSelector}" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="IPropertyCollectionItemDataTemplate"
                  DataType="propertiesTree:IPropertyCollectionTreeNodeViewModel">
        <StackPanel Orientation="Vertical">
            <ContentPresenter Content="{Binding }" ContentTemplate="{StaticResource ITreeNodeItemDataTemplate}" />
            <Grid Visibility="{Binding IsExpanded, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="24" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ItemsControl
                    Grid.Column="1"
                    ItemsSource="{Binding Items}"
                    Grid.IsSharedSizeScope="True">
                    <ItemsControl.Style>
                        <Style TargetType="ItemsControl">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CollectionType}"
                                             Value="{x:Static propertiesTree:CollectionType.PropertyValue}">
                                    <Setter Property="ItemTemplate"
                                            Value="{StaticResource PropertyValueItemDataTemplate}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding CollectionType}"
                                             Value="{x:Static propertiesTree:CollectionType.PropertyItemsCollection}">
                                    <Setter Property="ItemTemplate"
                                            Value="{DynamicResource IPropertyCollectionItemDataTemplate}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ItemsControl.Style>
                </ItemsControl>
            </Grid>
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>